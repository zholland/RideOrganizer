var optimizeClicked = false;

// Initialize the new driver and passenger rows in the table.
function initNewTravellerRows() {
    $('<tr id="new-driver-row">').appendTo('#drivers-table tbody')
            .append($('<td>').html('<a class="new-driver" href="#" id="newdrivername" data-title="Enter name"></a>'))
            .append($('<td>').html('<a class="new-driver" href="#" id="newdriveremail" data-title="Enter email"></a>'))
            .append($('<td>').html('<a class="new-driver" href="#" id="newdriveraddress" data-title="Enter address"></a>'))
            .append($('<td>').html('<a class="new-driver" href="#" id="newdrivernumber_of_passengers" data-title="Enter vehicle capacity"></a>'))
            .append($('<td>').html('<button class="btn btn-primary table-button" id="save-new-driver">Save</button>'));

    $('<tr id="new-passenger-row">').appendTo('#passengers-table tbody')
            .append($('<td>').html('<a class="new-passenger" href="#" id="newpassengername" data-title="Enter name"></a>'))
            .append($('<td>').html('<a class="new-passenger" href="#" id="newpassengeremail" data-title="Enter email"></a>'))
            .append($('<td>').html('<a class="new-passenger" href="#" id="newpassengeraddress" data-title="Enter address"></a>'))
            .append($('<td>').html('<button class="btn btn-primary table-button" id="save-new-passenger">Save</button>'));
}

// Update the driver and passenger tables.
function updateTravellers(travellers) {
    // Remove existing rows
    $('#drivers-table tbody').children().remove();
    $('#passengers-table tbody').children().remove();

    var driverIds = [];
    var passengerIds = [];
    var i;
    for (i = 0; i < travellers.length; i++) {
        if (travellers[i].number_of_passengers != null) {
            $('<tr id="traveller-' + travellers[i].id + '">').appendTo('#drivers-table tbody')
                    .append($('<td>').html('<a href="#" id="name-' + travellers[i].id + '">' + travellers[i].name + '</a>'))
                    .append($('<td>').html('<a href="#" id="email-' + travellers[i].id + '">' + travellers[i].email + '</a>'))
                    .append($('<td>').html('<a href="#" id="address-' + travellers[i].id + '">' + travellers[i].address + '</a>'))
                    .append($('<td>').html('<a href="#" id="number_of_passengers-' + travellers[i].id + '">' + travellers[i].number_of_passengers + '</a>'))
                    .append($('<td>').html('<a href="destroy_traveller/' + travellers[i].id + '" data-remote="true" data-method="delete" onclick="removeRow(' + travellers[i].id + ')">Delete</a>'));
            driverIds[driverIds.length] = travellers[i].id
        } else {
            $('<tr id="traveller-' + travellers[i].id + '">').appendTo('#passengers-table tbody')
                    .append($('<td>').html('<a href="#" id="name-' + travellers[i].id + '">' + travellers[i].name + '</a>'))
                    .append($('<td>').html('<a href="#" id="email-' + travellers[i].id + '">' + travellers[i].email + '</a>'))
                    .append($('<td>').html('<a href="#" id="address-' + travellers[i].id + '">' + travellers[i].address + '</a>'))
                    .append($('<td>').html('<a href="destroy_traveller/' + travellers[i].id + '" data-remote="true" data-method="delete" onclick="removeRow(' + travellers[i].id + ')">Delete</a>'));
            passengerIds[passengerIds.length] = travellers[i].id
        }
    }
    initNewTravellerRows();
    return {drivers: driverIds, passengers: passengerIds};
}

function removeRow(id) {
    $('#traveller-' + id).remove();
}

function getEditNameOptions(id) {
    return {
        type: 'text',
        name: 'name',
        url: 'edit_name',
        pk: id,
        title: 'Enter name',
        validate: function (arg) {
            if ($.trim(arg) == '') return 'Required field: Please enter a name!';
            if (arg.match(/^[A-Z-' ]+$/i) == null) return "Invalid name format, only (letters), (-), ('), and (space) permitted!";
        }
    }
}

function getEditEmailOptions(id) {
    return {
        type: 'text',
        name: 'email',
        url: 'edit_email',
        pk: id,
        title: 'Enter email',
        validate: function (arg) {
            if ($.trim(arg) == '') return 'Required field: Please enter a valid email!';
            if (arg.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i) == null) return 'Invalid Email: Required field!';
        }
    }
}

function getEditAddressOptions(id) {
    return {
        type: 'text',
        name: 'address',
        url: 'edit_address',
        pk: id,
        title: 'Enter address',
        validate: function (arg) {
            if ($.trim(arg) == '') return 'Required field: Please enter a valid address!';
        }
    }
}

function getEditNumPassengersOptions(id) {
    return {
        type: 'text',
        name: 'number_of_passengers',
        url: 'edit_number_of_passengers',
        pk: id,
        title: 'Enter vehicle capacity',
        validate: function (arg) {
            if ($.trim(arg) == '') return 'Required field: Please enter a number 0-7!';
            if (arg.match(/^\d+$/) == null) return 'Not a valid number: please enter a number 0-7!';
            if (arg.match(/^[0-7]$/) == null) return "Number error: Program cannot handle '# of passengers' greater than 7!";
        }
    }
}

// Initialize x-editable on all the driver and passenger fields.
function initEditable(travellerIds) {
    if (!$.isEmptyObject(travellerIds)) {
        var i;
        var driverIds = travellerIds.drivers;
        var passengerIds = travellerIds.passengers;

        // Init the driver editables.
        for (i = 0; i < driverIds.length; i++) {
            $('#name-' + driverIds[i]).editable(getEditNameOptions(driverIds[i]));
            $('#email-' + driverIds[i]).editable(getEditEmailOptions(driverIds[i]));
            $('#address-' + driverIds[i]).editable(getEditAddressOptions(driverIds[i]));
            $('#number_of_passengers-' + driverIds[i]).editable(getEditNumPassengersOptions(driverIds[i]));
        }

        // Init the passenger editables
        for (i = 0; i < passengerIds.length; i++) {
            $('#name-' + passengerIds[i]).editable(getEditNameOptions(passengerIds[i]));
            $('#email-' + passengerIds[i]).editable(getEditEmailOptions(passengerIds[i]));
            $('#address-' + passengerIds[i]).editable(getEditAddressOptions(passengerIds[i]));
        }
    }

    $('.new-driver').editable({
        url: '/post'
    });

    $('.new-passenger').editable({
        url: '/post'
    });

    $('#newdrivername').editable('option', 'validate', function (v) {
        if (!v) return 'Name is a required field!';
        if (v.match(/^[A-Z-' ]+$/i) == null) return "Invalid name format, only (letters), (-), ('), and (space) permitted!";
    });

    $('#newdriveremail').editable('option', 'validate', function (v) {
        if (!v) return 'Email is a required required field!';
        if (v.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i) == null) return "Invalid email format!";
    });

    $('#newdriveraddress').editable('option', 'validate', function (v) {
        if (!v) return 'Address is a required field!';
    });

    $('#newdrivernumber_of_passengers').editable('option', 'validate', function (v) {
        if (!v) return 'Vehicle capacity is a required field!';
        if (v.match(/^\d+$/) == null) return 'Not a valid number: please enter a number 0-7!';
        if (v.match(/^[0-7]$/) == null) return "Number error: Program cannot handle a '# of passengers' greater than 7!";
    });

    $('#newpassengername').editable('option', 'validate', function (v) {
        if (!v) return 'Name is a required field!';
        if (v.match(/^[A-Z-' ]+$/i) == null) return "Invalid name format, only (letters), (-), ('), and (space) permitted!"
    });

    $('#newpassengeremail').editable('option', 'validate', function (v) {
        if (!v) return 'Email is a required field!';
        if (v.match(/^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i) == null) return "Invalid email format!";
    });

    $('#newpassengeraddress').editable('option', 'validate', function (v) {
        if (!v) return 'Address is a required field!';
    });

    //automatically show next editable
    $('.new-driver').on('save.new-driver', function(){
        var that = this;
        setTimeout(function () {
            $(that).closest('td').next().find('.new-driver').editable('show');
        }, 200);
    });

    // Automatically show next editable
    $('.new-passenger').on('save.new-passenger', function(){
        var that = this;
        setTimeout(function () {
            $(that).closest('td').next().find('.new-passenger').editable('show');
        }, 200);
    });

    $('#save-new-driver').click(function () {
        $('.new-driver').editable('submit', {
            url: 'new_driver',
            ajaxOptions: {
                method: 'POST',
                dataType: 'json' //assuming json response
            },
            success: function (travellers) {
                var travellerIds = updateTravellers(travellers);
                initEditable(travellerIds);
                var msg = 'New driver created successfully.';
                $('#driver-message').addClass('alert-success').removeClass('alert-danger-no-margin').html(msg).show();
            },
            error: function(errors) {
                var msg = '';
                if(errors && errors.responseText) { //ajax error, errors = xhr object
                    msg = errors.responseText;
                } else { //validation error (client-side or server-side)
                    $.each(errors, function(k, v) { msg += v+"<br>"; });
                }
                $('#driver-message').removeClass('alert-success').addClass('alert-danger-no-margin').html(msg).show();
            }
        });
    });

    $('#save-new-passenger').click(function () {
        $('.new-passenger').editable('submit', {
            url: 'new_passenger',
            ajaxOptions: {
                method: 'POST',
                dataType: 'json' //assuming json response
            },
            success: function (travellers) {
                var travellerIds = updateTravellers(travellers);
                initEditable(travellerIds);
                var msg = 'New passenger created successfully.';
                $('#passenger-message').addClass('alert-success').removeClass('alert-danger-no-margin').html(msg).show();
            },
            error: function(errors) {
                var msg = '';
                if(errors && errors.responseText) { //ajax error, errors = xhr object
                    msg = errors.responseText;
                } else { //validation error (client-side or server-side)
                    $.each(errors, function(k, v) { msg += v+"<br>"; });
                }
                $('#passenger-message').removeClass('alert-success').addClass('alert-danger-no-margin').html(msg).show();
            }
        });
    });
}

$(document).on('ready page:load', function () {
    //toggle `popup` / `inline` mode
    $.fn.editable.defaults.mode = 'popup';
    initNewTravellerRows();
    initEditable({});
    $(window).keydown(function (event) {
        if (event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });
});


// for validation of trip address on, new, guest_edit, edit runs when user clicks the new trip button of the create page
// or the save changes button on the edit pages
$(function(){
    $("#submit-button").click(function(e) {
        e.preventDefault();
        checkVaildAddress(e);
    });
});

// for validation of address on the guest_edit and edit pages
// runs when user clicks the optimize button
$(function(){
    $("#optimize-button").click(function(e) {
        e.preventDefault();
        optimizeClicked = true;
        checkVaildAddress(e);
    });
});


// validates the trip destination address
function checkVaildAddress(e) {
    // if there is no value in destination address
    if (!$("#trip_destination_address").val()) {
        e.preventDefault();
        // create div to display error message
        var prependDiv = document.createElement('div');
        prependDiv.setAttribute('class', 'alert alert-danger container');
        var prependMsg = document.createTextNode('Destination address cannot be empty!');
        prependDiv.appendChild(prependMsg);
        $('body').prepend(prependDiv);

        // add class to show user which input field needs to be fixed
        document.getElementById("trip_destination_address").className = "input-error";
    }
    // else there is a value in the destination address
    else {
        var pattern = /[a-zA-Z 0-9-]/;

        // if the value passes regex test
        if (pattern.test($("#trip_destination_address").val())) {

            var trip_address = $("#trip_destination_address").val();

            // send a post request to trip_plans_controller to validate the address
            $.post('validate_address', {data: trip_address}, function (data) {
                // response of -1 means that the address is invalid
                // display an error message
                if (data.response == "-1") {
                    e.preventDefault();
                    var prependDiv = document.createElement('div');
                    prependDiv.setAttribute('class', 'alert alert-danger container');
                    prependDiv.setAttribute('id', 'input-alert');

                    if (document.contains(document.getElementById("input-alert"))) {
                        document.getElementById("input-alert").remove();
                    }

                    var prependMsg = document.createTextNode('You have entered an invalid destination address, please enter a different address.');
                    prependDiv.appendChild(prependMsg);
                    $('body').prepend(prependDiv);

                    // add class to show user which input field needs to be fixed
                    document.getElementById("trip_destination_address").className = "input-error";

                }
                // else we know that the address is valid
                // check to see if the number driver's seats available is valid
                // if yes, submit the form
                else {
                    if (checkNumDrivers(e)) {
                        if (optimizeClicked) {
                            window.location.assign("/trip_plans/12/planner_output");
                        }
                        else {
                            $('#new-trip-form').submit();
                        }

                    } else {
                        e.preventDefault();
                    }
                }
            }).fail(function() {
                e.preventDefault();
                alert('Internal Server Error. Please try again later.');
            });

        }
        // else the regex failed, must be an invalid address, alert the user
        else {
            e.preventDefault();
            var prependDiv = document.createElement('div');
            prependDiv.setAttribute('class', 'alert alert-danger container');
            prependDiv.setAttribute('id', 'input-alert');

            if (document.contains(document.getElementById("input-alert"))) {
                document.getElementById("input-alert").remove();
            }

            var prependMsg = document.createTextNode('You have entered an invalid destination address, please enter a different address.');
            prependDiv.appendChild(prependMsg);
            $('body').prepend(prependDiv);

            // add class to show user which input field needs to be fixed
            document.getElementById("trip_destination_address").className = "input-error";
        }
    }
}

// verify that the number of passengers does not exceed the number of seats
function checkNumDrivers(e) {
    var driversSum = 0;
    $("[id*='number_of_passengers-']").each(function () {
        var currId = this.id;
        var currNumPass = $("#" + currId).text();
        driversSum = driversSum + parseInt(currNumPass);
    });

    // get the number of rows in the passenger table - take away 2 b/c one row for headers, one row for new input
    var numPassengers = document.getElementById("passengers-table").rows.length - 2;

    // if there are more passengers than seats, create an error message
    if (driversSum < numPassengers) {
        e.preventDefault();
        var prependDiv = document.createElement('div');
        prependDiv.setAttribute('class', 'alert alert-danger container');
        prependDiv.setAttribute('id', 'input-alert');

        if (document.contains(document.getElementById("input-alert"))) {
            document.getElementById("input-alert").remove();
        }

        var prependMsg = document.createTextNode("The number of passengers exceeds the number of available seats in the driver's cars. Please fix this error before proceeding.");
        prependDiv.appendChild(prependMsg);
        $('body').prepend(prependDiv);
        return false;
    }
    // otherwise there are enough seats for passengers, return true
    else {
        return true;
    }
}