function initNewTravellerRows() {
    $('<tr id="new-driver-row">').appendTo('#drivers-table tbody')
        .append($('<td>').html('<a class="new-driver" href="#" id="newdrivername" data-title="Enter name"></a>'))
        .append($('<td>').html('<a class="new-driver" href="#" id="newdriveremail" data-title="Enter email"></a>'))
        .append($('<td>').html('<a class="new-driver" href="#" id="newdriveraddress" data-title="Enter address"></a>'))
        .append($('<td>').html('<a class="new-driver" href="#" id="newdrivernumber_of_passengers" data-title="Enter vehicle capacity"></a>'))
        .append($('<td>').html('<button class="btn btn-primary table-button" id="save-new-driver">Save</button>'));

    $('<tr id="new-passenger-row">').appendTo('#passengers-table tbody')
        .append($('<td>').html('<a class="new-passenger" href="#" id="newpassengername" data-title="Enter name"></a>'))
        .append($('<td>').html('<a class="new-passenger" href="#" id="newpassengeremail" data-title="Enter email"></a>'))
        .append($('<td>').html('<a class="new-passenger" href="#" id="newpassengeraddress" data-title="Enter address"></a>'))
        .append($('<td>').html('<button class="btn btn-primary table-button" id="save-new-passenger">Save</button>'));
}

function updateTravellers(travellers) {
    // Remove existing rows
    $('#drivers-table tbody').children().remove();
    $('#passengers-table tbody').children().remove();

    var driverIds = [];
    var passengerIds = [];
    var i;
    for (i = 0; i < travellers.length; i++) {
        if (travellers[i].number_of_passengers != null) {
            $('<tr id="traveller-' + travellers[i].id + '">').appendTo('#drivers-table tbody')
                .append($('<td>').html('<a href="#" id="name-' + travellers[i].id + '">' + travellers[i].name + '</a>'))
                .append($('<td>').html('<a href="#" id="email-' + travellers[i].id + '">' + travellers[i].email + '</a>'))
                .append($('<td>').html('<a href="#" id="address-' + travellers[i].id + '">' + travellers[i].address + '</a>'))
                .append($('<td>').html('<a href="#" id="number_of_passengers-' + travellers[i].id + '">' + travellers[i].number_of_passengers + '</a>'))
                .append($('<td>').html('<a href="destroy_traveller/' + travellers[i].id + '" data-remote="true" data-method="delete" onclick="removeRow(' + travellers[i].id + ')">Delete</a>'));
            driverIds[driverIds.length] = travellers[i].id
        } else {
            $('<tr id="traveller-' + travellers[i].id + '">').appendTo('#passengers-table tbody')
                .append($('<td>').html('<a href="#" id="name-' + travellers[i].id + '">' + travellers[i].name + '</a>'))
                .append($('<td>').html('<a href="#" id="email-' + travellers[i].id + '">' + travellers[i].email + '</a>'))
                .append($('<td>').html('<a href="#" id="address-' + travellers[i].id + '">' + travellers[i].address + '</a>'))
                .append($('<td>').html('<a href="destroy_traveller/' + travellers[i].id + '" data-remote="true" data-method="delete" onclick="removeRow(' + travellers[i].id + ')">Delete</a>'));
            passengerIds[passengerIds.length] = travellers[i].id
        }
    }
    initNewTravellerRows();
    return {drivers: driverIds, passengers: passengerIds};
}

function removeRow(id) {
    $('#traveller-' + id).remove();
}

function getEditNameOptions(id) {
    return {
        type: 'text',
        name: 'name',
        url: 'edit_name',
        pk: id,
        title: 'Enter name'
    }
}

function getEditEmailOptions(id) {
    return {
        type: 'text',
        name: 'email',
        url: 'edit_email',
        pk: id,
        title: 'Enter email'
    }
}

function getEditAddressOptions(id) {
    return {
        type: 'text',
        name: 'address',
        url: 'edit_address',
        pk: id,
        title: 'Enter address'
    }
}

function getEditNumPassengersOptions(id) {
    return {
        type: 'text',
        name: 'number_of_passengers',
        url: 'edit_number_of_passengers',
        pk: id,
        title: 'Enter vehicle capacity'
    }
}

function initEditable(travellerIds) {
    if (!$.isEmptyObject(travellerIds)) {
        var i;
        var driverIds = travellerIds.drivers;
        var passengerIds = travellerIds.passengers;

        for (i = 0; i < driverIds.length; i++) {
            $('#name-' + driverIds[i]).editable(getEditNameOptions(driverIds[i]));
            $('#email-' + driverIds[i]).editable(getEditEmailOptions(driverIds[i]));
            $('#address-' + driverIds[i]).editable(getEditAddressOptions(driverIds[i]));
            $('#number_of_passengers-' + driverIds[i]).editable(getEditNumPassengersOptions(driverIds[i]));
        }

        for (i = 0; i < passengerIds.length; i++) {
            $('#name-' + passengerIds[i]).editable(getEditNameOptions(passengerIds[i]));
            $('#email-' + passengerIds[i]).editable(getEditEmailOptions(passengerIds[i]));
            $('#address-' + passengerIds[i]).editable(getEditAddressOptions(passengerIds[i]));
        }
    }

    //init editables
    $('.new-driver').editable({
        url: '/post'
    });

    $('.new-passenger').editable({
        url: '/post'
    });

    $('#newdrivername').editable('option', 'validate', function(v) {
        if(!v) return 'Required field!';
    });

    $('#newdriveremail').editable('option', 'validate', function(v) {
        if(!v) return 'Required field!';
    });

    $('#newdriveraddress').editable('option', 'validate', function(v) {
        if(!v) return 'Required field!';
    });

    $('#newdrivernumber_of_passengers').editable('option', 'validate', function(v) {
        if(!v) return 'Required field!';
    });

    $('#newpassengername').editable('option', 'validate', function(v) {
        if(!v) return 'Required field!';
    });

    $('#newpassengeremail').editable('option', 'validate', function(v) {
        if(!v) return 'Required field!';
    });

    $('#newpassengeraddress').editable('option', 'validate', function(v) {
        if(!v) return 'Required field!';
    });

    //automatically show next editable
    $('.new-driver').on('save.new-driver', function(){
        var that = this;
        setTimeout(function() {
            $(that).closest('td').next().find('.new-driver').editable('show');
        }, 200);
    });

    //automatically show next editable
    $('.new-passenger').on('save.new-passenger', function(){
        var that = this;
        setTimeout(function() {
            $(that).closest('td').next().find('.new-passenger').editable('show');
        }, 200);
    });

    $('#save-new-driver').click(function() {
        $('.new-driver').editable('submit', {
            url: 'new_driver',
            ajaxOptions: {
                method: 'POST',
                dataType: 'json' //assuming json response
            },
            success: function(travellers) {
                var travellerIds = updateTravellers(travellers);
                initEditable(travellerIds);
                var msg = 'New driver created successfully.';
                $('#driver-message').addClass('alert-success').removeClass('alert-danger-no-margin').html(msg).show();
            },
            error: function(errors) {
                var msg = '';
                if(errors && errors.responseText) { //ajax error, errors = xhr object
                    msg = errors.responseText;
                } else { //validation error (client-side or server-side)
                    $.each(errors, function(k, v) { msg += v+"<br>"; });
                }
                $('#driver-message').removeClass('alert-success').addClass('alert-danger-no-margin').html(msg).show();
            }
        });
    });

    $('#save-new-passenger').click(function() {
        $('.new-passenger').editable('submit', {
            url: 'new_passenger',
            ajaxOptions: {
                method: 'POST',
                dataType: 'json' //assuming json response
            },
            success: function(travellers) {
                var travellerIds = updateTravellers(travellers);
                initEditable(travellerIds);
                var msg = 'New passenger created successfully.';
                $('#passenger-message').addClass('alert-success').removeClass('alert-danger-no-margin').html(msg).show();
            },
            error: function(errors) {
                var msg = '';
                if(errors && errors.responseText) { //ajax error, errors = xhr object
                    msg = errors.responseText;
                } else { //validation error (client-side or server-side)
                    $.each(errors, function(k, v) { msg += v+"<br>"; });
                }
                $('#passenger-message').removeClass('alert-success').addClass('alert-danger-no-margin').html(msg).show();
            }
        });
    });
}

$(document).on('ready page:load', function () {
    //toggle `popup` / `inline` mode
    $.fn.editable.defaults.mode = 'popup';
    initNewTravellerRows();
    initEditable({});
    $(window).keydown(function(event){
        if(event.keyCode == 13) {
            event.preventDefault();
            return false;
        }
    });
});


// for validation of trip address on, new, guest_edit, edit
$(function(){
    // initiates when the user clicks the submit button -->
    $("#new-trip-form").submit(function(e){
        var validAddress = checkVaildAddress();
        var enoughDrivers = checkNumDrivers();

        if (validAddress && enoughDrivers) {
            $("#new-trip-form").submit();
        } else {
            e.preventDefault();
        }


    });
});

$(function(){
    $("#optimize-button").click(function(e) {
        var validAddress = checkVaildAddress();
        var enoughDrivers = checkNumDrivers();

        if (!(validAddress && enoughDrivers)) {
            e.preventDefault();
        }
    });
});



function checkVaildAddress() {
    // if there is no value in destination address
    if (!$("#trip_destination_address").val()) {

        // create div to display error message
        var prependDiv = document.createElement('div');
        prependDiv.setAttribute('class', 'alert alert-danger container');
        var prependMsg = document.createTextNode('Destination address cannot be empty!');
        prependDiv.appendChild(prependMsg);
        $('body').prepend(prependDiv);

        // add class to show user which input field needs to be fixed
        document.getElementById("trip_destination_address").className = "input-error";
        return false;
    }
    else {
        var pattern = /[a-zA-Z 0-9-]/;
        // if passes regex test
        if (pattern.test($("#trip_destination_address").val())) {

            // try to get geocoded value of destintation address
            <%  #coordinate_array = Geocoder.do_geocode(trip_address)
                coordinate_array = []
                if coordinate_array == nil %>

            // create div and message to prepend to body
            var prependDiv = document.createElement('div');
            prependDiv.setAttribute('class', 'alert alert-danger container');
            var prependMsg = document.createTextNode('You have entered an invalid destination address, please enter a different address.');
            prependDiv.appendChild(prependMsg);
            $('body').prepend(prependDiv);

            // add class to show user which input field needs to be fixed
            document.getElementById("trip_destination_address").className = "input-error";
            return false;
            // otherwise submit the trip form
            <% else %>
                return true;
            <% end %>
        }

        // else there is no value in the input address
        else {
            var prependDiv = document.createElement('div');
            prependDiv.setAttribute('class', 'alert alert-danger container');
            var prependMsg = document.createTextNode('You have entered an invalid destination address, please enter a different address.');
            prependDiv.appendChild(prependMsg);
            $('body').prepend(prependDiv);

            // add class to show user which input field needs to be fixed
            document.getElementById("trip_destination_address").className = "input-error";
            return false;
        }
    }
}

function checkNumDrivers() {
    var driversSum = 0;
    $("[id*='number_of_passengers-']").each(function () {
        var currId = this.id;
        var currNumPass = $("#" + currId).text();
        driversSum = driversSum + parseInt(currNumPass);
    });

    // get the number of rows in the passenger table - take away 2 b/c one row for headers, one row for new input
    var numPassengers = document.getElementById("passengers-table").rows.length - 2;

    if (driversSum < numPassengers) {
        var prependDiv = document.createElement('div');
        prependDiv.setAttribute('class', 'alert alert-danger container');
        var prependMsg = document.createTextNode("The number of passengers exceeds the number of available seats in the driver's cars. Please fix this error before proceeding.");
        prependDiv.appendChild(prependMsg);
        $('body').prepend(prependDiv);
        return false;

    }
    else {
        return true;
    }
}